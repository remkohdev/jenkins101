{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jenkins 101 \u00b6 Self: http://ibm.biz/jenkins101 Prerequirements \u00b6 For this lab you need the following setup: An IBM Cloud account, for instructions go here . Access to an OpenShift cluster, for an IBM managed workshop you can add an existing OpenShift cluster to your IBMId, for instructions go here . A client terminal at CognitiveClass.ai, for instructions go here . To connect to a RedHat OpenShift Kubernetes Service (ROKS), follow the instructions here . Labs \u00b6 Lab01 - Create a Classic Pipeline with Jenkins (Ephemeral) on OpenShift 3 Lab02 - Create an OpenShift Pipeline with Jenkins Pipeline Build Strategy on OpenShift 3 OpenShift \u00b6 A Build is the process to transform source code into a runnable image. A BuildConfig object is the definition of the entire build process. The Jenkins Pipeline Build Strategy defaults to using a jenkinsfile at the root of your source repository. The Build strategies in OCP 4.5 are: - Source-to-Image (S2I), - Pipeline allows a Jenkins pipeline for execution by Jenkins, - Docker, - Custom. The Build strategies in OCP 4.3 are: - Docker build, - Source-to-Image (S2I) build, - Custom build, - Pipeline build, can be used to implement sophisticated workflows for Continuous Integration and Continuous Deployment (CI/CD). Pipeline build strategy allows developers to define a Jenkins pipeline in a Jenkinsfile. Note the Pipeline build strategy is deprecated in OCP 4 and is replaced with OpenShift Pipelines based on Tekton. With an ImageStream , you can trigger Builds and Deployments when a new image is pushed to the registry. You can configure Builds and Deployments to watch an image stream for notifications when new images are added and react by performing a Build or Deployment, respectively. Contributors \u00b6 Remko de Knikker github","title":"About the workshop"},{"location":"#jenkins-101","text":"Self: http://ibm.biz/jenkins101","title":"Jenkins 101"},{"location":"#prerequirements","text":"For this lab you need the following setup: An IBM Cloud account, for instructions go here . Access to an OpenShift cluster, for an IBM managed workshop you can add an existing OpenShift cluster to your IBMId, for instructions go here . A client terminal at CognitiveClass.ai, for instructions go here . To connect to a RedHat OpenShift Kubernetes Service (ROKS), follow the instructions here .","title":"Prerequirements"},{"location":"#labs","text":"Lab01 - Create a Classic Pipeline with Jenkins (Ephemeral) on OpenShift 3 Lab02 - Create an OpenShift Pipeline with Jenkins Pipeline Build Strategy on OpenShift 3","title":"Labs"},{"location":"#openshift","text":"A Build is the process to transform source code into a runnable image. A BuildConfig object is the definition of the entire build process. The Jenkins Pipeline Build Strategy defaults to using a jenkinsfile at the root of your source repository. The Build strategies in OCP 4.5 are: - Source-to-Image (S2I), - Pipeline allows a Jenkins pipeline for execution by Jenkins, - Docker, - Custom. The Build strategies in OCP 4.3 are: - Docker build, - Source-to-Image (S2I) build, - Custom build, - Pipeline build, can be used to implement sophisticated workflows for Continuous Integration and Continuous Deployment (CI/CD). Pipeline build strategy allows developers to define a Jenkins pipeline in a Jenkinsfile. Note the Pipeline build strategy is deprecated in OCP 4 and is replaced with OpenShift Pipelines based on Tekton. With an ImageStream , you can trigger Builds and Deployments when a new image is pushed to the registry. You can configure Builds and Deployments to watch an image stream for notifications when new images are added and react by performing a Build or Deployment, respectively.","title":"OpenShift"},{"location":"#contributors","text":"Remko de Knikker github","title":"Contributors"},{"location":"images/","text":"Setup \u00b6 Kubernetes Cluster \u00b6 For an IBM led workshop, you can use a temporary free cluster that was pre-created for the purpose of the workshop. You need an IBM Cloud account to access your cluster, If you do not have IBM Cloud account yet, register at https://cloud.ibm.com/registration, Open the URL that was provided to you by the instructor to access your cluster, Log in to this IBM Cloud account using the workshop code and your IBM Cloud account IBM id, Instructions will ask to Log in to this IBM Cloud account Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load, Go to the Access menu item in the left navigation column, Follow the instructions to access your cluster from the client, If you need a cloudshell you can use https://shell.cloud.ibm.com/. It should be attached to your IBMid. It might take a few moments to create the instance and a new session, You should now be read to start with Lab 1 ,","title":"Setup"},{"location":"images/#setup","text":"","title":"Setup"},{"location":"images/#kubernetes-cluster","text":"For an IBM led workshop, you can use a temporary free cluster that was pre-created for the purpose of the workshop. You need an IBM Cloud account to access your cluster, If you do not have IBM Cloud account yet, register at https://cloud.ibm.com/registration, Open the URL that was provided to you by the instructor to access your cluster, Log in to this IBM Cloud account using the workshop code and your IBM Cloud account IBM id, Instructions will ask to Log in to this IBM Cloud account Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load, Go to the Access menu item in the left navigation column, Follow the instructions to access your cluster from the client, If you need a cloudshell you can use https://shell.cloud.ibm.com/. It should be attached to your IBMid. It might take a few moments to create the instance and a new session, You should now be read to start with Lab 1 ,","title":"Kubernetes Cluster"},{"location":"images/README%20copy/","text":"Setup \u00b6 Kubernetes Cluster \u00b6 For an IBM led workshop, you can use a temporary free cluster that was pre-created for the purpose of the workshop. You need an IBM Cloud account to access your cluster, If you do not have IBM Cloud account yet, register at https://cloud.ibm.com/registration, Open the URL that was provided to you by the instructor to access your cluster, Log in to this IBM Cloud account using the workshop code and your IBM Cloud account IBM id, Instructions will ask to Log in to this IBM Cloud account Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load, Go to the Access menu item in the left navigation column, Follow the instructions to access your cluster from the client, If you need a cloudshell you can use https://shell.cloud.ibm.com/. It should be attached to your IBMid. It might take a few moments to create the instance and a new session, You should now be read to start with Lab 1 ,","title":"Setup"},{"location":"images/README%20copy/#setup","text":"","title":"Setup"},{"location":"images/README%20copy/#kubernetes-cluster","text":"For an IBM led workshop, you can use a temporary free cluster that was pre-created for the purpose of the workshop. You need an IBM Cloud account to access your cluster, If you do not have IBM Cloud account yet, register at https://cloud.ibm.com/registration, Open the URL that was provided to you by the instructor to access your cluster, Log in to this IBM Cloud account using the workshop code and your IBM Cloud account IBM id, Instructions will ask to Log in to this IBM Cloud account Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load, Go to the Access menu item in the left navigation column, Follow the instructions to access your cluster from the client, If you need a cloudshell you can use https://shell.cloud.ibm.com/. It should be attached to your IBMid. It might take a few moments to create the instance and a new session, You should now be read to start with Lab 1 ,","title":"Kubernetes Cluster"},{"location":"lab-01/","text":"Create a Classic Pipeline with Jenkins on OpenShift 4.5 \u00b6 Requirements \u00b6 An IBM Cloud account An OpenShift 4.x cluster with a minimum of 2 worker nodes Access to a terminal with the oc cli and ibmcloud cli, use Skills Network or IBM Cloud shell . For instructions go here . A Jenkins instance on OpenShift 4.x, see setup below, A Github fork of https://github.com/remkohdev/spring-client, Github personal access token Setup Jenkins on OpenShift 4.x \u00b6 Go to Setup Jenkins on OpenShift 4.x to complete the Jenkins setup and configuration on OpenShift 4.x using the Jenkins Operator. Fork the spring-client App in Github \u00b6 To create a fork of the spring-client repository: Go to https://github.com/remkohdev/spring-client, Cick the Fork button in the to right to create a fork in your own GitHub organization, e.g. https://github.com/<username>/spring-client Review the Jenkinsfile that is included in the Spring Client repository, Edit the Jenkinsfile, Copy the login command to your OpenShift cluster, $ oc login https://c100-e.us-south.containers.cloud.ibm.com:30645 --token = CgwpwTu12sJV3u45iFFWd-6V7JsD8b90JBoJk1zGR2I In the environment section of the Jenkinsfile , change the LOGIN_URL and the LOGIN_PORT to match pipeline { agent any tools { maven 'maven' } environment { LOGIN_URL = 'https://c100-e.us-south.containers.cloud.ibm.com' LOGIN_PORT = '30645' } Note: it is not proper to leave configuration details in your repository, let alone on public Github, but for simplicity I defined the URL and NodePort here. Commit changes to the Jenkinsfile to your Github fork. The Jenkins pipeline will use your Jenkinsfile to deploy your forked spring-client to your own OpenShift cluster. Create a Github Personal Access Token \u00b6 Login to your Github account at https://github.com/ Go to https://github.com/settings/tokens Click Generate new token Under Note add github-access-token-for-jenkins-on-openshift , Select the scopes for repo , read:repo_hook , and user , Click Generate token , Copy the token and save it, you need it to create the Jenkins pipeline from the Github source, E.g. create an environment variable GITHUB_TOKEN, export GITHUB_TOKEN=<your token> Configure Jenkins Access to OpenShift \u00b6 Go to the OpenShift web console again or use the Copy Login Command from earlier again, From the logged in user profile dropdown, click the Copy Login Command . The command should look like, oc login https://<your-openshift-url>:<your-openshift-port> --token=<your-openshift-api-token> Copy the OpenShift API token value, e.g. aaHYcMwUyyusfNaS45aAiQer_Kas1YUa45YTA2AxsNI, Go to the Jenkins dashboard, Click Credentials, or Go to Jenkins > Manage Jenkins > Configure Credentials Go to Credentials > System, In the System view, select the dropdown for Global credentials (unrestricted), From the drowdown, click Add credentials , The Jenkinsfile expects an OpenShift API token credential to be available named openshift-login-api-token , For Kind select Username with password , For Scope select Global , For Username enter token , For Password paste the OpenShift API token from the OpenShift web console login command, For ID enter openshift-login-api-token , which is the ID that the Jenkinsfile will look for, For Description enter openshift-login-api-token , Click OK, Create a Jenkins Pipeline \u00b6 Make sure a project springclient-ns exists in OpenShift, if no springclient-ns project exists, create it from the cloud shell, oc new-project springclient-ns Or via the UI, open the OpenShift web console, From the top navigation dropdown, go to the Cluster Console , Go to Administration > Projects, Filter projects by springclient-ns , If there is no such project, click Create Project to create it, The Jenkinsfile of the spring-client application defines a stage to delete and create the springclient-ns project. The delete step causes an error when the project it tries to delete is missing, Go back to the Jenkins dashboard. If you closed Jenkins, Go to the Application Console , and go to the project jenkins , Click the Route for External Traffic to open the Jenkins instance, Click Log in with OpenShift , In the Jenkins Dashboard, click Open Blue Ocean to open the Blue Ocean editor. If the Welcome to Jenkins popup window shows, click the Create a new Pipeline button, Otherwise, click the New Pipeline button in the Pipelines window. This will create a new Multibranch Pipeline, Select the GitHub option, In the Connect to GitHub section, paste the personal access token you created in your Github account, Click Connect, Select the organization to where you forked the spring-client repository, Search for and select the spring-client repo, Click Create Pipeline, When the pipeline creation is completed, a build is triggered automatically, You should see a successful build of the pipeline, If an error occurs, you can debug the pipeline by unfolding the red cross indicating on the stage, which indicates the pipeline failed in that stage, Unfold the step in the stage, to see the log output, Any update to the Github repository, e.g. a push to update the Jenkinsfile, source code of the Spring Boot application, or the README.md file, will automatically trigger a new build of the pipeline, If you're interested, review the pipeline settings: Click the Configure option, Review the settings, From the cloud shell, make sure you're logged in to the OpenShift console, Use the project oc project springclient-ns , oc project springclient-ns outputs, $ oc project springclient-ns Now using project \"springclient-ns\" on server \"https://c100-e.us-south.containers.cloud.ibm.com:30645\". Get the route and test the deployment, ROUTE=\"$(oc get route springclient -o json | jq -r '.spec .host')\" curl -X GET http://$ROUTE/api/hello?name=you outputs, ROUTE=\"$(oc get route springclient -o json | jq -r '.spec .host')\" curl -X GET http://$ROUTE/api/hello?name=you { \"message\" : \"Hello you\" }","title":"Lab 1 Classic Jenkins"},{"location":"lab-01/#create-a-classic-pipeline-with-jenkins-on-openshift-45","text":"","title":"Create a Classic Pipeline with Jenkins on OpenShift 4.5"},{"location":"lab-01/#requirements","text":"An IBM Cloud account An OpenShift 4.x cluster with a minimum of 2 worker nodes Access to a terminal with the oc cli and ibmcloud cli, use Skills Network or IBM Cloud shell . For instructions go here . A Jenkins instance on OpenShift 4.x, see setup below, A Github fork of https://github.com/remkohdev/spring-client, Github personal access token","title":"Requirements"},{"location":"lab-01/#setup-jenkins-on-openshift-4x","text":"Go to Setup Jenkins on OpenShift 4.x to complete the Jenkins setup and configuration on OpenShift 4.x using the Jenkins Operator.","title":"Setup Jenkins on OpenShift 4.x"},{"location":"lab-01/#fork-the-spring-client-app-in-github","text":"To create a fork of the spring-client repository: Go to https://github.com/remkohdev/spring-client, Cick the Fork button in the to right to create a fork in your own GitHub organization, e.g. https://github.com/<username>/spring-client Review the Jenkinsfile that is included in the Spring Client repository, Edit the Jenkinsfile, Copy the login command to your OpenShift cluster, $ oc login https://c100-e.us-south.containers.cloud.ibm.com:30645 --token = CgwpwTu12sJV3u45iFFWd-6V7JsD8b90JBoJk1zGR2I In the environment section of the Jenkinsfile , change the LOGIN_URL and the LOGIN_PORT to match pipeline { agent any tools { maven 'maven' } environment { LOGIN_URL = 'https://c100-e.us-south.containers.cloud.ibm.com' LOGIN_PORT = '30645' } Note: it is not proper to leave configuration details in your repository, let alone on public Github, but for simplicity I defined the URL and NodePort here. Commit changes to the Jenkinsfile to your Github fork. The Jenkins pipeline will use your Jenkinsfile to deploy your forked spring-client to your own OpenShift cluster.","title":"Fork the spring-client App in Github"},{"location":"lab-01/#create-a-github-personal-access-token","text":"Login to your Github account at https://github.com/ Go to https://github.com/settings/tokens Click Generate new token Under Note add github-access-token-for-jenkins-on-openshift , Select the scopes for repo , read:repo_hook , and user , Click Generate token , Copy the token and save it, you need it to create the Jenkins pipeline from the Github source, E.g. create an environment variable GITHUB_TOKEN, export GITHUB_TOKEN=<your token>","title":"Create a Github Personal Access Token"},{"location":"lab-01/#configure-jenkins-access-to-openshift","text":"Go to the OpenShift web console again or use the Copy Login Command from earlier again, From the logged in user profile dropdown, click the Copy Login Command . The command should look like, oc login https://<your-openshift-url>:<your-openshift-port> --token=<your-openshift-api-token> Copy the OpenShift API token value, e.g. aaHYcMwUyyusfNaS45aAiQer_Kas1YUa45YTA2AxsNI, Go to the Jenkins dashboard, Click Credentials, or Go to Jenkins > Manage Jenkins > Configure Credentials Go to Credentials > System, In the System view, select the dropdown for Global credentials (unrestricted), From the drowdown, click Add credentials , The Jenkinsfile expects an OpenShift API token credential to be available named openshift-login-api-token , For Kind select Username with password , For Scope select Global , For Username enter token , For Password paste the OpenShift API token from the OpenShift web console login command, For ID enter openshift-login-api-token , which is the ID that the Jenkinsfile will look for, For Description enter openshift-login-api-token , Click OK,","title":"Configure Jenkins Access to OpenShift"},{"location":"lab-01/#create-a-jenkins-pipeline","text":"Make sure a project springclient-ns exists in OpenShift, if no springclient-ns project exists, create it from the cloud shell, oc new-project springclient-ns Or via the UI, open the OpenShift web console, From the top navigation dropdown, go to the Cluster Console , Go to Administration > Projects, Filter projects by springclient-ns , If there is no such project, click Create Project to create it, The Jenkinsfile of the spring-client application defines a stage to delete and create the springclient-ns project. The delete step causes an error when the project it tries to delete is missing, Go back to the Jenkins dashboard. If you closed Jenkins, Go to the Application Console , and go to the project jenkins , Click the Route for External Traffic to open the Jenkins instance, Click Log in with OpenShift , In the Jenkins Dashboard, click Open Blue Ocean to open the Blue Ocean editor. If the Welcome to Jenkins popup window shows, click the Create a new Pipeline button, Otherwise, click the New Pipeline button in the Pipelines window. This will create a new Multibranch Pipeline, Select the GitHub option, In the Connect to GitHub section, paste the personal access token you created in your Github account, Click Connect, Select the organization to where you forked the spring-client repository, Search for and select the spring-client repo, Click Create Pipeline, When the pipeline creation is completed, a build is triggered automatically, You should see a successful build of the pipeline, If an error occurs, you can debug the pipeline by unfolding the red cross indicating on the stage, which indicates the pipeline failed in that stage, Unfold the step in the stage, to see the log output, Any update to the Github repository, e.g. a push to update the Jenkinsfile, source code of the Spring Boot application, or the README.md file, will automatically trigger a new build of the pipeline, If you're interested, review the pipeline settings: Click the Configure option, Review the settings, From the cloud shell, make sure you're logged in to the OpenShift console, Use the project oc project springclient-ns , oc project springclient-ns outputs, $ oc project springclient-ns Now using project \"springclient-ns\" on server \"https://c100-e.us-south.containers.cloud.ibm.com:30645\". Get the route and test the deployment, ROUTE=\"$(oc get route springclient -o json | jq -r '.spec .host')\" curl -X GET http://$ROUTE/api/hello?name=you outputs, ROUTE=\"$(oc get route springclient -o json | jq -r '.spec .host')\" curl -X GET http://$ROUTE/api/hello?name=you { \"message\" : \"Hello you\" }","title":"Create a Jenkins Pipeline"},{"location":"lab-02/","text":"Using a Pipeline Build Strategy on OpenShift 4.x \u00b6 With the release of OpenShift Pipelines based on Tekton, the pipelines build strategy has been deprecated on OpenShift 4.x. Users should either use Jenkins files directly on Jenkins or use cloud-native CI/CD with Openshift Pipelines. OpenShift Pipelines give you control over building, deploying, and promoting your applications on OpenShift. Using a combination of the Jenkins Pipeline Build Strategy, Jenkinsfiles, and the OpenShift Domain Specific Language (DSL) (provided by the OpenShift Jenkins Client Plug-in), you can create advanced build, test, deploy, and promote pipelines for any scenario. The OpenShift Jenkins Client Plug-in must be installed on your Jenkins master. The OpenShift Jenkins Client Plug-in provides a fluent-styled DSL for communicating with the OpenShift API from within the Jenkins slaves. The OpenShift DSL is based on Groovy syntax and provides methods for controlling the lifecycle of your application such as create, build, deploy, and delete. This strategy defaults to using a jenkinsfile. The jenkinsfile is executed on the Jenkins slave pod. This lab creates an OpenShift Pipeline to build the springclient application instead of a pure Jenkins Pipeline. The OpenShift Pipeline still uses the Jenkins Pipeline strategy but OpenShift will now create a Jenkins slave to execute the pipeline and managing the Pipeline is now done in OpenShift. Clean up Existing Deployment \u00b6 Go to the Cloud Shell and make sure you are logged in to your cluster, Delete the existing project, oc delete project jenkins oc delete project springclient-ns outputs, $ oc delete project jenkins project.project.openshift.io \"jenkins\" deleted $ oc delete project springclient-ns project.project.openshift.io \"springclient-ns\" deleted Your existing Jenkins deployment should be deleted, as well as your springclient deployment. Deploy the Spring Client \u00b6 From the cloud shell, Create the project anew, oc new-project springclient-ns Create the BuildConfig declaration file using a Jenkins pipeline strategy, use your own forked repo instead of the one listed in the spec.source.git.uri attribute here, and set the spec.strategy.jenkinsPipelineStrategy.env environment vairables to match your cluster's LOGIN_URL and LOGIN_PORT found via the Copy Login Command , echo 'kind: \"BuildConfig\" apiVersion: \"v1\" metadata: name: \"spring-client-pipeline\" namespace: springclient-ns spec: source: git: uri: \"https://github.com/remkohdev/spring-client\" ref: \"master\" strategy: jenkinsPipelineStrategy: jenkinsfilePath: Jenkinsfile-oc env: - name: \"LOGIN_URL\" value: \"https://c103-e.us-south.containers.cloud.ibm.com\" - name: \"LOGIN_PORT\" value: \"32110\" - name: \"PROJECT\" value: \"springclient-ns\"' > spring-client-pipeline.yaml A BuildConfig or build configuration describes a build definition and triggers for when a new build should be created. The Pipeline build strategy allows you to define a Jenkins pipeline for execution by the Jenkins pipeline plugin . The first time a user defines a build configuration in a project using a Pipeline strategy, OpenShift Container Platform instantiates a Jenkins server to execute the pipeline. To be sure, close any tabs open to the Jenkins instance. Review the Jenkinsfile called Jenkinsfile-oc for the OpenShift Pipeline at https://github.com/remkohdev/spring-client/Jenkinsfile-oc. The pipeline is using the Maven DSL (Domain Specific Language) and the OpenShift DSL. Create a Jenkins master, oc new-app jenkins-ephemeral outputs, $ oc new-app jenkins-ephemeral --> Deploying template \"openshift/jenkins-ephemeral\" to project springclient-ns Jenkins (Ephemeral) --------- Jenkins service, without persistent storage. WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing. A Jenkins service has been created in your project. Log into Jenkins with your OpenShift account. The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template. * With parameters: * Jenkins Service Name=jenkins * Jenkins JNLP Service Name=jenkins-jnlp * Enable OAuth in Jenkins=true * Memory Limit=1Gi * Jenkins ImageStream Namespace=openshift * Disable memory intensive administrative monitors=false * Jenkins ImageStreamTag=jenkins:2 * Allows use of Jenkins Update Center repository with invalid SSL certificate=false --> Creating resources ... route.route.openshift.io \"jenkins\" created deploymentconfig.apps.openshift.io \"jenkins\" created serviceaccount \"jenkins\" created rolebinding.authorization.openshift.io \"jenkins_edit\" created service \"jenkins-jnlp\" created service \"jenkins\" created --> Success Access your application via route 'jenkins-springclient-ns.remkohdev-roks43-785329-2bef1f4b4097001da9502000c44fc2b2-0000.sjc03.containers.appdomain.cloud' Run 'oc status' to view your app. Go to your OpenShift console, go to Workloads > Pods and in the project springclient-ns , view the status of your Jenkins instance, From the console output or the OpenShift console > Networking > Routes, get the route to access the Jenkins instance, open the link to your Jenkins instance in a new tab, Log in with OpenShift, Authorize access and click Allow selected permissions , Welcome to Jenkins! Create the BuildConfig and the OpenShift Pipeline, oc create -f spring-client-pipeline.yaml outputs, $ oc create -f spring-client-pipeline.yaml buildconfig.build.openshift.io/spring-client-pipeline created Go to Builds > Build Configs , Start a build of the pipeline, $ oc start-build spring-client-pipeline build.build.openshift.io/spring-client-pipeline-1 started Go to Builds > Builds . Select the springclient-ns project from the Project dropdown. Once the Jenkins instance is created, the Jenkins instance will start the pipeline to create the springclient application. A pipeline build was started, The View logs will open the Jenkins instance, Resources \u00b6 See: OpenShift Build Strategies","title":"Lab 2 OpenShift Pipeline"},{"location":"lab-02/#using-a-pipeline-build-strategy-on-openshift-4x","text":"With the release of OpenShift Pipelines based on Tekton, the pipelines build strategy has been deprecated on OpenShift 4.x. Users should either use Jenkins files directly on Jenkins or use cloud-native CI/CD with Openshift Pipelines. OpenShift Pipelines give you control over building, deploying, and promoting your applications on OpenShift. Using a combination of the Jenkins Pipeline Build Strategy, Jenkinsfiles, and the OpenShift Domain Specific Language (DSL) (provided by the OpenShift Jenkins Client Plug-in), you can create advanced build, test, deploy, and promote pipelines for any scenario. The OpenShift Jenkins Client Plug-in must be installed on your Jenkins master. The OpenShift Jenkins Client Plug-in provides a fluent-styled DSL for communicating with the OpenShift API from within the Jenkins slaves. The OpenShift DSL is based on Groovy syntax and provides methods for controlling the lifecycle of your application such as create, build, deploy, and delete. This strategy defaults to using a jenkinsfile. The jenkinsfile is executed on the Jenkins slave pod. This lab creates an OpenShift Pipeline to build the springclient application instead of a pure Jenkins Pipeline. The OpenShift Pipeline still uses the Jenkins Pipeline strategy but OpenShift will now create a Jenkins slave to execute the pipeline and managing the Pipeline is now done in OpenShift.","title":"Using a Pipeline Build Strategy on OpenShift 4.x"},{"location":"lab-02/#clean-up-existing-deployment","text":"Go to the Cloud Shell and make sure you are logged in to your cluster, Delete the existing project, oc delete project jenkins oc delete project springclient-ns outputs, $ oc delete project jenkins project.project.openshift.io \"jenkins\" deleted $ oc delete project springclient-ns project.project.openshift.io \"springclient-ns\" deleted Your existing Jenkins deployment should be deleted, as well as your springclient deployment.","title":"Clean up Existing Deployment"},{"location":"lab-02/#deploy-the-spring-client","text":"From the cloud shell, Create the project anew, oc new-project springclient-ns Create the BuildConfig declaration file using a Jenkins pipeline strategy, use your own forked repo instead of the one listed in the spec.source.git.uri attribute here, and set the spec.strategy.jenkinsPipelineStrategy.env environment vairables to match your cluster's LOGIN_URL and LOGIN_PORT found via the Copy Login Command , echo 'kind: \"BuildConfig\" apiVersion: \"v1\" metadata: name: \"spring-client-pipeline\" namespace: springclient-ns spec: source: git: uri: \"https://github.com/remkohdev/spring-client\" ref: \"master\" strategy: jenkinsPipelineStrategy: jenkinsfilePath: Jenkinsfile-oc env: - name: \"LOGIN_URL\" value: \"https://c103-e.us-south.containers.cloud.ibm.com\" - name: \"LOGIN_PORT\" value: \"32110\" - name: \"PROJECT\" value: \"springclient-ns\"' > spring-client-pipeline.yaml A BuildConfig or build configuration describes a build definition and triggers for when a new build should be created. The Pipeline build strategy allows you to define a Jenkins pipeline for execution by the Jenkins pipeline plugin . The first time a user defines a build configuration in a project using a Pipeline strategy, OpenShift Container Platform instantiates a Jenkins server to execute the pipeline. To be sure, close any tabs open to the Jenkins instance. Review the Jenkinsfile called Jenkinsfile-oc for the OpenShift Pipeline at https://github.com/remkohdev/spring-client/Jenkinsfile-oc. The pipeline is using the Maven DSL (Domain Specific Language) and the OpenShift DSL. Create a Jenkins master, oc new-app jenkins-ephemeral outputs, $ oc new-app jenkins-ephemeral --> Deploying template \"openshift/jenkins-ephemeral\" to project springclient-ns Jenkins (Ephemeral) --------- Jenkins service, without persistent storage. WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing. A Jenkins service has been created in your project. Log into Jenkins with your OpenShift account. The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template. * With parameters: * Jenkins Service Name=jenkins * Jenkins JNLP Service Name=jenkins-jnlp * Enable OAuth in Jenkins=true * Memory Limit=1Gi * Jenkins ImageStream Namespace=openshift * Disable memory intensive administrative monitors=false * Jenkins ImageStreamTag=jenkins:2 * Allows use of Jenkins Update Center repository with invalid SSL certificate=false --> Creating resources ... route.route.openshift.io \"jenkins\" created deploymentconfig.apps.openshift.io \"jenkins\" created serviceaccount \"jenkins\" created rolebinding.authorization.openshift.io \"jenkins_edit\" created service \"jenkins-jnlp\" created service \"jenkins\" created --> Success Access your application via route 'jenkins-springclient-ns.remkohdev-roks43-785329-2bef1f4b4097001da9502000c44fc2b2-0000.sjc03.containers.appdomain.cloud' Run 'oc status' to view your app. Go to your OpenShift console, go to Workloads > Pods and in the project springclient-ns , view the status of your Jenkins instance, From the console output or the OpenShift console > Networking > Routes, get the route to access the Jenkins instance, open the link to your Jenkins instance in a new tab, Log in with OpenShift, Authorize access and click Allow selected permissions , Welcome to Jenkins! Create the BuildConfig and the OpenShift Pipeline, oc create -f spring-client-pipeline.yaml outputs, $ oc create -f spring-client-pipeline.yaml buildconfig.build.openshift.io/spring-client-pipeline created Go to Builds > Build Configs , Start a build of the pipeline, $ oc start-build spring-client-pipeline build.build.openshift.io/spring-client-pipeline-1 started Go to Builds > Builds . Select the springclient-ns project from the Project dropdown. Once the Jenkins instance is created, the Jenkins instance will start the pipeline to create the springclient application. A pipeline build was started, The View logs will open the Jenkins instance,","title":"Deploy the Spring Client"},{"location":"lab-02/#resources","text":"See: OpenShift Build Strategies","title":"Resources"},{"location":"resources/CONTRIBUTORS/","text":"Contributors \u00b6 Remko de Knikker (github)","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#contributors","text":"Remko de Knikker (github)","title":"Contributors"},{"location":"resources/RESOURCES/","text":"Additional Resources \u00b6 IBM Demos \u00b6 Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage Redbooks \u00b6 IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices Videos \u00b6 Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Additional Resources"},{"location":"resources/RESOURCES/#additional-resources","text":"","title":"Additional Resources"},{"location":"resources/RESOURCES/#ibm-demos","text":"Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage","title":"IBM Demos"},{"location":"resources/RESOURCES/#redbooks","text":"IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices","title":"Redbooks"},{"location":"resources/RESOURCES/#videos","text":"Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Videos"}]}